<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>linux并发与竞争</title>
    <link href="/2022/09/28/linux%E5%B9%B6%E5%8F%91%E4%B8%8E%E7%AB%9E%E4%BA%89/"/>
    <url>/2022/09/28/linux%E5%B9%B6%E5%8F%91%E4%B8%8E%E7%AB%9E%E4%BA%89/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>实验1：gpio-led</title>
    <link href="/2022/09/24/%E5%AE%9E%E9%AA%8C1%EF%BC%9Agpio-led/"/>
    <url>/2022/09/24/%E5%AE%9E%E9%AA%8C1%EF%BC%9Agpio-led/</url>
    
    <content type="html"><![CDATA[<div align="center"><h3 id="硬件结构"><a href="#硬件结构" class="headerlink" title="硬件结构"></a>硬件结构</h3></div><ul><li><strong>引脚</strong>：GPIO1_IO03</li><li><strong>复用功能</strong>：GPIO</li><li><strong>confg_reg</strong>：0x10b0（查芯片手册）</li><li><strong>有效电平</strong>：0-亮 1-灭</li></ul><div align="center"><h3 id="设备树中添加LED节点"><a href="#设备树中添加LED节点" class="headerlink" title="设备树中添加LED节点"></a>设备树中添加LED节点</h3><p>&lt;arch&#x2F;arm&#x2F;boot&#x2F;dts&gt;</p></div><ol><li><p>在.dts文件&amp;iomuxc节点的imx6ul-evk子节点下创建led所用到的pinctrl节点，用于描述pin信息</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">pinctrl_led:</span> <span class="hljs-title class_">ledgrp</span><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">fsl,pins</span> <span class="hljs-operator">=</span> <span class="hljs-params">&lt;</span><br><span class="hljs-params">        MX6UL_PAD_GPIO1_IO03__GPIO1_IO03 <span class="hljs-number">0x10b0</span></span><br><span class="hljs-params"> &gt;</span><span class="hljs-punctuation">;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li></ol><ul><li><em>MX6UL_PAD_GPIO1_IO03__GPIO1_IO03</em>  在imx6ul-pinfunc.h中定义</li><li><em>0x10b0</em> 为pin初始化的电器属性</li></ul><ol start="2"><li><p>在.dts根节点内添加led设备节点</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-title class_">gpioled</span><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">compatible</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;gpio, led&quot;</span><span class="hljs-punctuation">;</span><br>    <span class="hljs-attr">pinctrl-names</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;default&quot;</span><span class="hljs-punctuation">;</span><br>    pinctrl<span class="hljs-number">-0</span> = <span class="hljs-params">&lt;<span class="hljs-variable">&amp;pinctrl_led</span>&gt;</span><span class="hljs-punctuation">;</span><br>    gpio_<span class="hljs-attr">led</span> <span class="hljs-operator">=</span> <span class="hljs-params">&lt;<span class="hljs-variable">&amp;gpio1</span> <span class="hljs-number">3</span> GPIO_ACTIVE_LOW&gt;</span><span class="hljs-punctuation">;</span><br>    <span class="hljs-attr">status</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;okay&quot;</span><span class="hljs-punctuation">;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li><em>compatible</em>：匹配属性，驱动通过此字符串与设备节点匹配</li><li><em>pinctrl-names</em>：pinctrl名</li><li><em>pinctrl-0</em>：此设备节点使用的pinctrl节点</li><li><em>gpio_led</em>：设备引脚对应的gpio，初始为low状态</li></ul></li><li><p>检查PIN是否被其他外设节点使用</p><ul><li>搜索“gpio1 3”,</li></ul></li><li><p>编译设备树文件</p><ul><li>make dtbs命令</li></ul></li><li><p>用新的dtb文件启动系统，&#x2F;proc&#x2F;device-tree下有gpioled节点。</p></li></ol><div align="center"><h3 id="驱动程序编写"><a href="#驱动程序编写" class="headerlink" title="驱动程序编写"></a>驱动程序编写</h3></div><p>字符设备驱动框架+pinctrl子系统+gpio子系统<br>在框架的基础上，添加了节点指针node和gpio标号led_gpio<br>使用goto语句对各项异常进行<strong>有序</strong>处理</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/kernel.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/init.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/module.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/cdev.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/device.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/fs.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/of.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/of_gpio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/err.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;asm/uaccess.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> GPIOLED_NAME    <span class="hljs-string">&quot;gpio_led&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> GPIOLED_CNT     1</span><br><br><span class="hljs-comment">/* 声明设备结构体类型 */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">gpioled_dev</span>&#123;</span><br>    <span class="hljs-type">int</span> major;         <span class="hljs-comment">//主设备号</span><br>    <span class="hljs-type">int</span> minor;         <span class="hljs-comment">//从设备号</span><br>    <span class="hljs-type">dev_t</span> dev_id;      <span class="hljs-comment">//设备号</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cdev</span> <span class="hljs-title">cdev</span>;</span>  <span class="hljs-comment">//字符设备</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-keyword">class</span> *<span class="hljs-keyword">class</span>;</span> <span class="hljs-comment">//类指针</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">device</span> *<span class="hljs-title">device</span>;</span> <span class="hljs-comment">//设备指针</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">device_node</span> *<span class="hljs-title">nd</span>;</span>  <span class="hljs-comment">//设备树中设备节点</span><br>    <span class="hljs-type">int</span> led_gpio;            <span class="hljs-comment">//gpio标号</span><br>&#125;;<br><span class="hljs-comment">/* 创建设备对象 */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">gpioled_dev</span> <span class="hljs-title">gpioled</span>;</span><br><br><span class="hljs-comment">/* open函数具体实现 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">gpioled_open</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> inode *inode, <span class="hljs-keyword">struct</span> file *filp)</span><br>&#123;<br>    filp-&gt;private_data = &amp;gpioled;      <span class="hljs-comment">//将设备结构体设为私有数据</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/* read函数具体实现  本设备节点不需要使用read函数 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">ssize_t</span> <span class="hljs-title function_">gpioled_read</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> file *filp, <span class="hljs-type">char</span> __user *buf, <span class="hljs-type">size_t</span> cnt, <span class="hljs-type">loff_t</span> *offt)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/* write函数具体实现 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">ssize_t</span> <span class="hljs-title function_">gpioled_write</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> file *filp, <span class="hljs-type">const</span> <span class="hljs-type">char</span> __user *buf, <span class="hljs-type">size_t</span> cnt, <span class="hljs-type">loff_t</span> *offt)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">gpioled_dev</span> *<span class="hljs-title">dev</span> =</span> (<span class="hljs-keyword">struct</span> gpioled_dev *) filp-&gt;private_data;<br>    <span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> data_buf[<span class="hljs-number">1</span>];    <span class="hljs-comment">//接收应用层发送的数据</span><br>    ret = copy_from_user(data_buf, buf, cnt);<br>    <span class="hljs-keyword">if</span>(ret &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        printk(<span class="hljs-string">&quot;copy from user erro \n&quot;</span>);<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>        gpio_set_value(dev-&gt;led_gpio, data_buf[<span class="hljs-number">0</span>]);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/* release函数具体实现 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">gpioled_release</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> inode *inode, <span class="hljs-keyword">struct</span> file *filp)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/* 文件操作函数集合 */</span><br><span class="hljs-type">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file_operations</span> <span class="hljs-title">gpioled_fops</span> =</span> &#123;<br>    .open = gpioled_open,<br>    .read = gpioled_read,<br>    .write = gpioled_write,<br>    .release = gpioled_release,  <br>&#125;;<br><br><span class="hljs-comment">/* 模块入口执行函数 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> __init <span class="hljs-title function_">gpioled_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;            <span class="hljs-comment">//接收返回值</span><br><br>    <span class="hljs-comment">/* 获取设备节点 */</span><br>    gpioled.nd = of_find_node_by_path(<span class="hljs-string">&quot;/gpioled&quot;</span>);<br>    <span class="hljs-keyword">if</span>(IS_ERR(gpioled.nd))<br>    &#123;<br>        printk(<span class="hljs-string">&quot;find the node failed \n&quot;</span>);<br>        ret = PTR_ERR(gpioled.nd);<br>        <span class="hljs-keyword">goto</span> fail_node;<br>    &#125;<br>    <span class="hljs-comment">/* 获取gpio标号 */</span><br>    gpioled.led_gpio = of_get_named_gpio(gpioled.nd, <span class="hljs-string">&quot;led_gpio&quot;</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span>(gpioled.led_gpio &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        printk(<span class="hljs-string">&quot;get gpio num failed \n&quot;</span>);<br>        ret = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">goto</span> fail_gpio;<br>    &#125;<br><br>    <span class="hljs-comment">/* 申请gpio */</span><br>    ret = gpio_request(gpioled.led_gpio, <span class="hljs-string">&quot;led_gpio&quot;</span>);<br>    <span class="hljs-keyword">if</span>(ret &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        printk(<span class="hljs-string">&quot;gpio request failed |n&quot;</span>);<br>        <span class="hljs-keyword">goto</span> fail_gpio_req;<br>    &#125;<br><br>    <span class="hljs-comment">/* 设置gpio为输出 */</span><br>    ret = gpio_direction_output(gpioled.led_gpio, <span class="hljs-number">0</span>);  <span class="hljs-comment">//初始电平为低</span><br>    <span class="hljs-keyword">if</span>(ret &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        printk(<span class="hljs-string">&quot;gpio dir set failed |n&quot;</span>);<br>        <span class="hljs-keyword">goto</span> fail_dir;<br>    &#125;<br><br>    <span class="hljs-comment">/* 注册字符设备驱动 */</span><br>    <span class="hljs-comment">/* 获取设备号 */</span><br>    <span class="hljs-keyword">if</span>(gpioled.major)       <span class="hljs-comment">//如果已经设定了主设备号</span><br>    &#123;<br>        gpioled.dev_id = MKDEV(gpioled.major, <span class="hljs-number">0</span>);  <span class="hljs-comment">//以0为从设备号合成一个设备id</span><br>        ret = register_chrdev_region(gpioled.dev_id, GPIOLED_CNT, GPIOLED_NAME); <span class="hljs-comment">//注册设备号</span><br>    &#125;<br>    <span class="hljs-keyword">else</span>        <span class="hljs-comment">//未设定设备号</span><br>    &#123;<br>        ret = alloc_chrdev_region(&amp;gpioled.dev_id, <span class="hljs-number">0</span>, GPIOLED_CNT, GPIOLED_NAME); <span class="hljs-comment">//分配并注册设备号</span><br>        gpioled.major = MAJOR(gpioled.dev_id);<br>        gpioled.minor = MINOR(gpioled.dev_id);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!ret)<br>        printk(<span class="hljs-string">&quot;devid registered sucessfully! \n, major = %d, minor = %d\n&quot;</span>, gpioled.major, gpioled.minor);<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">goto</span> fail_devid;<br><br>    <span class="hljs-comment">/* 初始化并添加cdev */</span><br>    gpioled.cdev.owner = THIS_MODULE;<br>    cdev_init(&amp;gpioled.cdev, &amp;gpioled_fops);<br>    ret = cdev_add(&amp;gpioled.cdev, gpioled.dev_id, GPIOLED_CNT);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-number">0</span> == ret)<br>        printk(<span class="hljs-string">&quot;cdev added successfully ! \n&quot;</span>);<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">goto</span> fail_cdev;<br><br>    <span class="hljs-comment">/* 创建类 */</span><br>    gpioled.class = class_create(THIS_MODULE, GPIOLED_NAME);<br>    <span class="hljs-keyword">if</span>(!IS_ERR(gpioled.class))<br>        printk(<span class="hljs-string">&quot;class created successfully! \n&quot;</span>);<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        ret = PTR_ERR(gpioled.class);<br>        <span class="hljs-keyword">goto</span> fail_class;<br>    &#125;<br><br>    <span class="hljs-comment">/* 创建设备 */</span><br>    gpioled.device = device_create(gpioled.class, <span class="hljs-literal">NULL</span>, gpioled.dev_id, <span class="hljs-literal">NULL</span>, GPIOLED_NAME);<br>    <span class="hljs-keyword">if</span>(!IS_ERR(gpioled.device))<br>        printk(<span class="hljs-string">&quot;device created successfully! \n&quot;</span>);<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        ret = PTR_ERR(gpioled.device);<br>        <span class="hljs-keyword">goto</span> fail_device;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">/* 错误处理 */</span><br>    fail_device: class_destroy(gpioled.class);<br><br>    fail_class: cdev_del(&amp;gpioled.cdev);<br><br>    fail_cdev: unregister_chrdev_region(gpioled.dev_id, GPIOLED_CNT);<br>    fail_dir:<br>        gpio_free(gpioled.led_gpio);<br>    fail_gpio_req:<br>    fail_gpio:<br>    fail_node:<br>    fail_devid: <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-comment">/* 模块出口执行函数 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> __exit <span class="hljs-title function_">gpioled_exit</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    cdev_del(&amp;gpioled.cdev);              <span class="hljs-comment">//删除cedev</span><br>    unregister_chrdev_region(gpioled.dev_id, GPIOLED_CNT);   <span class="hljs-comment">//注销设备号</span><br>    device_destroy(gpioled.class, gpioled.dev_id);    <span class="hljs-comment">// 摧毁device</span><br>    class_destroy(gpioled.class);     <span class="hljs-comment">// 摧毁class</span><br>    gpio_free(gpioled.led_gpio);      <span class="hljs-comment">//释放gpio标号</span><br>&#125;<br><br><span class="hljs-comment">/* 模块入口 */</span><br>module_init(gpioled_init);<br><span class="hljs-comment">/* 模块出口 */</span><br>module_exit(gpioled_exit);<br><span class="hljs-comment">/* 模块协议 */</span><br>MODULE_LICENSE(<span class="hljs-string">&quot;GPL&quot;</span>);<br><span class="hljs-comment">/* 模块作者 */</span><br>MODULE_AUTHOR(<span class="hljs-string">&quot;Hector&quot;</span>);<br></code></pre></td></tr></table></figure><blockquote><p>Makefile以及测试app程序较为简单，不作描述<br>此驱动程序已验证通过，成功点亮第一颗LED</p></blockquote><!--PC版--><div id="SOHUCS" ></div><script charset="utf-8" type="text/javascript" src="https://cy-cdn.kuaizhan.com/upload/changyan.js" ></script><script type="text/javascript">window.changyan.api.config({appid: 'cywhVLBNm',conf: 'prod_449188a899f144a2be2e05b0a1b8f390'});</script>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Drivers</category>
      
      <category>实验</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux_driver</tag>
      
      <tag>pinctrl</tag>
      
      <tag>gpio</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pinctrl和gpio子系统</title>
    <link href="/2022/09/23/pinctrl%E5%92%8Cgpio%E5%AD%90%E7%B3%BB%E7%BB%9F/"/>
    <url>/2022/09/23/pinctrl%E5%92%8Cgpio%E5%AD%90%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<div align="center"><h3 id="pinctrl子系统（源码位置-drivers-x2F-pinctrl）"><a href="#pinctrl子系统（源码位置-drivers-x2F-pinctrl）" class="headerlink" title="pinctrl子系统（源码位置 drivers&#x2F;pinctrl）"></a>pinctrl子系统（源码位置 drivers&#x2F;pinctrl）</h3></div/><h4 id="pinctrl子系统工作内容"><a href="#pinctrl子系统工作内容" class="headerlink" title="pinctrl子系统工作内容"></a><strong>pinctrl子系统工作内容</strong></h4><ol><li>获取设备树中的pin信息</li><li>根据获取到的pin信息来设置pin的复用功能</li><li>根据获取到的pin信息来设置pin的电气特性</li></ol><h4 id="pin配置信息详解"><a href="#pin配置信息详解" class="headerlink" title="pin配置信息详解"></a><strong>pin配置信息详解</strong></h4><p>一般在设备树中创建一个节点描述pin信息，以imx6u为例：<br>imx6ull.dtsi中有iomuxc节点描述外设pin信息</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">iomuxc:</span> <span class="hljs-title class_">iomuxc@020e0000</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">compatible</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;fsl,imx6ul-iomuxc&quot;</span><span class="hljs-punctuation">;</span><br><span class="hljs-attr">reg</span> <span class="hljs-operator">=</span> <span class="hljs-params">&lt;<span class="hljs-number">0x020e0000</span> <span class="hljs-number">0x4000</span>&gt;</span><span class="hljs-punctuation">;</span><br><span class="hljs-punctuation">&#125;;</span><br></code></pre></td></tr></table></figure><p>reg属性中的0x020e0000为iomuxc外设节点的首地址。<br>在.dts文件中以&amp;iomuxc引用方式向.dtsi文件中iomuxc节点追加信息</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-variable">&amp;iomuxc</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">pinctrl-names</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;default&quot;</span><span class="hljs-punctuation">;</span><br>    pinctrl<span class="hljs-number">-0</span> = <span class="hljs-params">&lt;<span class="hljs-variable">&amp;pinctrl_hog_1</span>&gt;</span><span class="hljs-punctuation">;</span><br>    <span class="hljs-title class_">imx6ul-evk</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-symbol">        pinctrl_hog_1:</span> <span class="hljs-title class_">hoggrp-1</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">fsl,pins</span> <span class="hljs-operator">=</span> <span class="hljs-params">&lt;</span><br><span class="hljs-params">                MX6UL_PAD_UART1_RTS_B__GPIO1_IO19       <span class="hljs-number">0x17059</span></span><br><span class="hljs-params">                MX6UL_PAD_GPIO1_IO05__USDHC1_VSELECT    <span class="hljs-number">0x17059</span></span><br><span class="hljs-params">                MX6UL_PAD_GPIO1_IO09__GPIO1_IO09        <span class="hljs-number">0x17059</span></span><br><span class="hljs-params">                MX6UL_PAD_GPIO1_IO00__ANATOP_OTG1_ID    <span class="hljs-number">0x13058</span></span><br><span class="hljs-params">            &gt;</span><span class="hljs-punctuation">;</span><br>        <span class="hljs-punctuation">&#125;;</span><br>        ...<br>    <span class="hljs-punctuation">&#125;;</span><br><span class="hljs-punctuation">&#125;;</span><br></code></pre></td></tr></table></figure><p>在内核源码中全局搜索iomuxc节点的compatible属性即可得到pinctrl驱动文件源码。<br>以pinctrl_hog_1节点为例，<code>MX6UL_PAD_UART1_RTS_B__GPIO1_IO19       0x17059</code></p><ul><li><strong>MX6UL_PAD_UART1_RTS_B__GPIO1_IO19</strong>是一个宏定义，定义在<strong>arch&#x2F;arm&#x2F;boot&#x2F;dts&#x2F;imx6ul-pinfunc.h</strong>。定义如下：<br><code>#define MX6UL_PAD_UART1_RTS_B__GPIO1_IO19 0x0090 0x031C 0x0000 0x5 0x0</code><ul><li><strong>0x0090</strong>(mux_reg寄存器偏移地址): 为IOMUXC_SW_MUX_CTL_PAD_UART1_RTS_B寄存器地址基于IOMUXC外设首地址的偏移量（复用配置）</li><li><strong>0x031C</strong>(conf_reg寄存器偏移地址): 为IOMUXC_SW_PAD_CTL_PAD_UART1_RTS_B寄存器地址基于IOMUXC外设首地址的偏移量（电器属性配置）</li><li><strong>0x0000</strong>(input_reg寄存器偏移地址): 有些外设有input_reg寄存器，此值为input_reg寄存器偏移量</li><li><strong>0x5</strong>(mux_reg寄存器值): 设置IOMUXC_SW_MUX_CTL_PAD_UART1_RTS_B寄存器值为0x5</li><li><strong>0x0</strong>(input_reg寄存器值): 设置input_reg寄存器值，此处无效</li></ul></li><li><strong>0x17059</strong> 为confg_reg寄存器的值，由程序员控制</li></ul><blockquote><p><em>注：.dtsi文件引用imx6ull-pinfunc.h文件，而imx6ull-pinfunc.h文件再引用imx6ull-pinfunc.h</em></p></blockquote><h4 id="PIN驱动程序详解"><a href="#PIN驱动程序详解" class="headerlink" title="PIN驱动程序详解"></a><strong>PIN驱动程序详解</strong></h4><blockquote><p>  此节涉及到linux驱动分层与分离以及平台设备驱动，未来另起一篇详写</p></blockquote><h4 id="设备树中添加pinctrl节点"><a href="#设备树中添加pinctrl节点" class="headerlink" title="设备树中添加pinctrl节点"></a><strong>设备树中添加pinctrl节点</strong></h4><blockquote><p>例：虚拟一个名为“test”的设备，设备使用GPIO1_IO00这个PIN的GPIO功能。<br>具体步骤如下：</p></blockquote><ol><li>在dts文件中iomuxc节点下的imx6ul-evk节点下添加”pinctrl_test”节点，前缀必须为”pinctrl_”<figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">pinctrl_test:</span>testgrp<span class="hljs-punctuation">&#123;</span><br>    待添加的具体的PIN信息<br><span class="hljs-punctuation">&#125;;</span><br></code></pre></td></tr></table></figure></li><li>添加”fsl,pins”属性，pinctrl驱动通过读取设备树中”fsl,pins”属性的内容来获取PIN的配置信息，不同芯片属性可能会有差别<figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">pinctrl_test:</span>testgrp<span class="hljs-punctuation">&#123;</span><br>    fsl,pins<span class="hljs-params">&lt;</span><br><span class="hljs-params">     待添加的PIN的配置信息</span><br><span class="hljs-params">    &gt;</span><span class="hljs-punctuation">;</span><br><span class="hljs-punctuation">&#125;;</span><br></code></pre></td></tr></table></figure></li><li>添加pin的配置信息,即复用引脚和config值<figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">pinctrl_test:</span>testgrp<span class="hljs-punctuation">&#123;</span><br>    fsl,pins<span class="hljs-params">&lt;</span><br><span class="hljs-params">     MX6UL_PAD_GPIO1_IO00__GPIO1_IO00 config</span><br><span class="hljs-params">    &gt;</span><span class="hljs-punctuation">;</span><br><span class="hljs-punctuation">&#125;;</span><br></code></pre></td></tr></table></figure></li></ol><div align="center">### gpio子系统</div/>gpio子系统的作用：初始化GPIO并提供相应的API函数<h4 id="设备树中的GPIO信息"><a href="#设备树中的GPIO信息" class="headerlink" title="设备树中的GPIO信息"></a><strong>设备树中的GPIO信息</strong></h4><ol><li>添加pinctrl名字<br><code>pinctrl-name = &quot;defaul&quot;;</code></li><li>在设备节点中添加设备所需的PIN的pinctrl信息所在子节点信息<br><code>pinctrl-n = &lt;&amp;pinctrl_xxx&gt;;</code><br>驱动根据pinctrl信息设置pin的复用功能和电气属性</li><li>在设备节点中添加描述GPIO属性的语句<br><code>xxx_gpios = &lt;&amp;GPIO组 pin号 有效电平&gt;</code><br>比如<br><code>cd_gpios = &lt;&amp;gpio1 19 GPIO_ACTIVE_LOW&gt;;</code></li></ol><h4 id="GPIO驱动程序详解"><a href="#GPIO驱动程序详解" class="headerlink" title="GPIO驱动程序详解"></a><strong>GPIO驱动程序详解</strong></h4><blockquote><p>  此节涉及到linux驱动分层与分离以及平台设备驱动，未来另起一篇详写</p></blockquote><h4 id="gpio子系统函数"><a href="#gpio子系统函数" class="headerlink" title="gpio子系统函数"></a><strong>gpio子系统函数</strong></h4><ol><li><strong>API函数</strong> <mark> &lt;linux&#x2F;gpio.h&gt; </mark><br><code>int gpio_request(unsigned gpio, const char *label)</code><br><strong>gpio</strong>:要申请的gpio标号，通过of_get_named_gpio函数获取此标号<br><strong>label</strong>：给此gpio设置一个名字<br><strong>返回值</strong>：0-申请成功 其他值-申请失败<ol start="2"><li>释放GPIO管脚<br><code>void gpio_free(unsigned gpio)</code><br><strong>gpio</strong>:要释放的gpio标号</li><li>设置gpio为输入模式<br><code>int gpio_direction_input(unsigned gpio) </code><br><strong>gpio</strong>：要设置的gpio标号<br><strong>返回值</strong>：0-设置成功 其他值-失败</li><li>设置gpio为输出模式<br><code>int gpio_direction_output(unsigned gpio)</code><br><strong>gpio</strong>：要设置的gpio标号<br><strong>返回值</strong>：0-设置成功 其他值-失败</li><li>获取gpio的值(宏函数)<br><code>int gpio_get_value(unsigned gpio) </code><br><strong>gpio</strong>：要获取的gpio标号<br><strong>返回值</strong>：gpio值</li><li>设置gpio的值（宏函数）<br><code>void gpio_set_value(unsigned gpio, int value)</code><br><strong>gpio</strong>：要设置的gpio标号<br><strong>value</strong>：要设置的gpio值</li></ol></li><li><strong>gpio相关的of函数</strong><mark> &lt;linux&#x2F;of_gpio.h&gt; </mark><ol><li>获取某属性中定义gpio信息的个数<br><code>int of_gpio_named_count(struct device_node* np, const char *propname)</code><br><strong>np</strong>：设备节点<br><strong>propname</strong>：要统计gpio个数的属性名<br><strong>返回值</strong>：gpio数目 负值表示失败</li><li>获取”gpios”属性的gpio信息的个数<br><code>int of_gpio_count(struct device_node* np)</code><br><strong>np</strong>：设备节点<br><strong>返回值</strong>：gpio数目 负值表示失败</li><li>获取GPIO标号<br><code>int of_get_named_gpio(struct device_node* np, const char *propname, int index)</code><br><strong>np</strong>：设备节点<br><strong>propname</strong>：要获取的GPIO所属属性名<br><strong>index</strong>：GPIO索引，一个属性中可能含有多个GPIO信息<br><strong>返回值</strong>：gpio标号 负值表示失败</li></ol></li></ol><!--PC版--><div id="SOHUCS" ></div><script charset="utf-8" type="text/javascript" src="https://cy-cdn.kuaizhan.com/upload/changyan.js" ></script><script type="text/javascript">window.changyan.api.config({appid: 'cywhVLBNm',conf: 'prod_449188a899f144a2be2e05b0a1b8f390'});</script>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Drivers</category>
      
      <category>子系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux_driver</tag>
      
      <tag>pinctrl</tag>
      
      <tag>gpio</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设备树详解</title>
    <link href="/2022/09/22/%E8%AE%BE%E5%A4%87%E6%A0%91%E8%AF%A6%E8%A7%A3/"/>
    <url>/2022/09/22/%E8%AE%BE%E5%A4%87%E6%A0%91%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h3 id="设备树"><a href="#设备树" class="headerlink" title="设备树"></a>设备树</h3><p>以树形结构描述板级设备节点</p><h4 id="设备树编译命令"><a href="#设备树编译命令" class="headerlink" title="设备树编译命令"></a>设备树编译命令</h4><ol><li>设备树源文件扩展名： .dts</li><li>设备树文件扩展名： .dtb </li><li>将设备树源文件编译成设备树文件： make dtbs</li><li>将指定xxx.dts编译为设备树文件： make xxx.dtb</li><li>设备树支持头文件引用，头文件扩展名为.dtsi，同样支持.h .dts文件的引用</li></ol><h4 id="设备树中的设备节点"><a href="#设备树中的设备节点" class="headerlink" title="设备树中的设备节点"></a>设备树中的设备节点</h4><ol><li><strong>根节点</strong>：&#x2F; 每个设备树文件只能有一个根节点，dts和dtsi中的根节点会合并为同一个根节点</li><li><strong>节点命名格式</strong>：<code>label:node-name@unit-address</code><br><strong>label（可有可无）</strong>:节点标签，可用&amp;label引用节点<br><strong>node-name</strong>:节点名称<br><strong>unit-address</strong>:设备地址或者寄存器首地址</li><li>设备树中数据格式：<table><thead><tr><th align="center">数据类型</th><th align="center">表达式</th></tr></thead><tbody><tr><td align="center">字符串</td><td align="center">“string”</td></tr><tr><td align="center">字符串列表</td><td align="center">“string1”,”string2”</td></tr><tr><td align="center">32位无符号整数</td><td align="center">&lt;0&gt;</td></tr><tr><td align="center">数组</td><td align="center">&lt;0 0x2412 1&gt;</td></tr></tbody></table></li></ol><h3 id="设备树标准属性"><a href="#设备树标准属性" class="headerlink" title="设备树标准属性"></a>设备树标准属性</h3><h4 id="compatible（兼容性属性）"><a href="#compatible（兼容性属性）" class="headerlink" title="compatible（兼容性属性）"></a>compatible（兼容性属性）</h4><p><strong>compatible属性值格式</strong>：<code>compatible = &quot;manufacture1,model1&quot;,&quot;manufacture2,model2&quot;...</code><br><strong>manufacture</strong>: 厂商名称<br><strong>model</strong>: 模块对应的驱动名称</p><blockquote><p>注1：驱动程序中的.of_match_table表储存驱动匹配的compatible值，驱动中的compatible属性与设备节点的compatible属性匹配成功后执行probe函数~</p></blockquote><blockquote><p>注2：根节点下的compatible属性用于内核判断是否支持当前设备~</p></blockquote><h4 id="model-（设备属性）"><a href="#model-（设备属性）" class="headerlink" title="model （设备属性）"></a>model （设备属性）</h4><p><strong>model属性值格式</strong>：<code>model=&quot;alpha_led&quot;</code></p><blockquote><p>字符串用于描述设备信息，比如名字、型号~</p></blockquote><h4 id="status（状态属性）"><a href="#status（状态属性）" class="headerlink" title="status（状态属性）"></a>status（状态属性）</h4><p><strong>status属性值格式</strong>：<code>status=&quot;string&quot;</code><br><strong>string表示设备状态</strong></p><table><thead><tr><th align="center">string值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">okay</td><td align="center">设备可操作</td></tr><tr><td align="center">disabled</td><td align="center">非使能状态，不可操作</td></tr><tr><td align="center">fail</td><td align="center">设备错误，不可操作</td></tr><tr><td align="center">fail-sss</td><td align="center">同fail，sss为错误信息</td></tr></tbody></table><h4 id="address-cells-和-size-cells"><a href="#address-cells-和-size-cells" class="headerlink" title="#address-cells 和 #size-cells"></a>#address-cells 和 #size-cells</h4><p>可用于任何拥有子节点的设备树节点中，用于描述子节点地址信息<br><strong>属性值格式</strong>：<code>#address-cells=&lt;1&gt;  #size-cells=&lt;0&gt;</code></p><ol><li><strong>#address-cells</strong>:描述子节点中reg属性中地址信息占用的字长</li><li><strong>#size-cells</strong>:描述子节点reg属性中长度信息占用的字长</li></ol><h4 id="reg-（设备地址空间资源属性）"><a href="#reg-（设备地址空间资源属性）" class="headerlink" title="reg （设备地址空间资源属性）"></a>reg （设备地址空间资源属性）</h4><p><strong>reg属性值格式</strong>：<code>reg=&lt;address length&gt;</code><br><strong>address</strong>: 空间首地址<br><strong>length</strong>: 空间长度</p><h4 id="ranges-（地址映射表，可以为空）"><a href="#ranges-（地址映射表，可以为空）" class="headerlink" title="ranges （地址映射表，可以为空）"></a>ranges （地址映射表，可以为空）</h4><p><strong>ranges属性值格式</strong>：<code>ranges=&lt;child-bus-address parent-bus-address length&gt;</code><br><strong>child-bus-address</strong>:子总线起始地址<br><strong>parent-bus-address</strong>:父总线起始地址<br><strong>length</strong>:长度</p><h3 id="查找节点属性的of操作函数"><a href="#查找节点属性的of操作函数" class="headerlink" title="查找节点属性的of操作函数"></a>查找节点属性的of操作函数</h3><p><mark> 包含头文件：<code>&lt;linux/of.h&gt;</code></mark></p><h4 id="查找节点函数"><a href="#查找节点函数" class="headerlink" title="查找节点函数"></a>查找节点函数</h4><ul><li><strong>使用结构体struct device_node 表示设备节点</strong></li></ul><ol><li><code>struct device_node *of_find_node_by_name(struct device_node *from, const char *name)</code><br>  <strong>from</strong>：起始节点，为NULL时从根节点开始查找<br>  <strong>name</strong>：需要查找的节点名称<br>  <strong>返回值</strong>：找到的节点指针，如果为NULL表示查找失败  <br/></li><li><code>struct device_node *of_find_node_by_type(struct device_node *from, const char *type)</code><br>  <strong>from</strong>：起始节点，为NULL时从根节点开始查找<br>  <strong>type</strong>：需要查找的节点类型<br>  <strong>返回值</strong>：找到的节点指针，如果为NULL表示查找失败  <br/></li><li><code>struct device_node *of_find_compatible_node(struct device_node *from, const char *type, const char *compatible)</code><br>  <strong>from</strong>：起始节点，为NULL时从根节点开始查找<br>  <strong>type</strong>：需要查找的节点类型<br>  <strong>compatible</strong>：节点兼容性属性<br>  <strong>返回值</strong>：找到的节点指针，如果为NULL表示查找失败  <br/></li><li><code>struct device_node *of_find_node_by_path(consy char *path)</code><br><strong>path</strong>：带有全路径的节点名<br><strong>返回值</strong>：找到的节点指针，如果为NULL表示查找失败</li></ol><h4 id="查找父节点和子节点函数"><a href="#查找父节点和子节点函数" class="headerlink" title="查找父节点和子节点函数"></a>查找父节点和子节点函数</h4><ol><li><code>struct device_node *of_get_parent(const struct device_node *node)</code><br><strong>node</strong>：子节点指针<br><strong>返回值</strong>：找到的父节点指针，如果为NULL表示查找失败<br/></li><li>struct device_node *of_get_next_child(const struct device_node *node, struct device_node *prev)<br><strong>node</strong>：父节点指针<br><strong>prev</strong>：前一个子节点，也就是设置从哪个子节点开始迭代查找，如果设置为NULL，表示从第一个子节点开始</li></ol><h4 id="提取节点属性值函数"><a href="#提取节点属性值函数" class="headerlink" title="提取节点属性值函数"></a>提取节点属性值函数</h4><p><mark>使用结构体<code>struct property</code>表示节点属性</mark><br><strong>property原型</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">property</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">char</span> *name;   <span class="hljs-comment">//属性名字</span><br>    <span class="hljs-type">int</span> length;   <span class="hljs-comment">//属性长度</span><br>    <span class="hljs-type">void</span> *value;  <span class="hljs-comment">//属性值</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">property</span> *<span class="hljs-title">next</span>;</span>  <span class="hljs-comment">//下一个属性指针</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> _flags;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> unique_id;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">bin_attrbiute</span> <span class="hljs-title">attr</span>;</span><br>&#125;<br></code></pre></td></tr></table></figure><ol><li><p>查找指定属性<br><code>struct property *of_find_property(const struct device_node *np, const char *name, int *lenp)</code><br><strong>np</strong>：设备节点<br><strong>name</strong>：需要查找的属性名字<br><strong>lenp</strong>：属性值的字节数<br><strong>返回值</strong>：查找到的属性，NULL表示失败</p><br/></li><li><p>获取属性中元素数量<br><code>int of_property_cunt_elems_of_size(const struct device_node *np, const char *propname, int elemsize)</code><br><strong>np</strong>：设备节点<br><strong>propname</strong>：属性名字<br><strong>elemsize</strong>：元素长度<br><strong>返回值</strong>：元素个数</p><br/></li><li><p>读u32数组元素值<br><code>int of_property_read_u32_index(const struct device_node *np, const char *propname, u32 index, u32 *outv_alue)</code><br><strong>np</strong>：设备节点<br><strong>propname</strong>：属性名称<br><strong>index</strong>：要读取的u32类型数据下标<br><strong>out_value</strong>:读取到的值存入此地址<br><strong>返回值</strong>：0-成功  负值-失败</p><br/></li><li><p>读属性中的数组数据</p><ul><li><code>int of_property_read_u8_arry (struct device_node *np,const char *propname,u8 *out_values,size_t sz)</code></li><li><code>int of_property_read_u16_arry (struct device_node *np,const char *propname,u16 *out_values,size_t sz)</code></li><li><code>int of_property_read_u32_arry (struct device_node *np,const char *propname,u32 *out_values,size_t sz)</code></li><li><code>int of_property_read_u64_arry (struct device_node *np,const char *propname,u64 *out_values,size_t sz)</code><br><strong>np</strong>：设备节点<br><strong>propname</strong>：属性名<br><strong>out_values</strong>：读取到的数组值存储位置的首地址<br><strong>sz</strong>：要读取的数组元素的数量<br/></li></ul></li><li><p>读取数组中的整型值（属性只有一个整型值）</p><ul><li><code>int of_property_read_u8(struct device_node *nd, const char * propname,u8 *outvalue)</code></li><li><code>int of_property_read_u16(struct device_node *nd, const char * propname,u16 *outvalue)</code></li><li><code>int of_property_read_u32(struct device_node *nd, const char * propname,u32 *outvalue)</code></li><li><code>int of_property_read_u64(struct device_node *nd, const char * propname,u64 *outvalue)</code><br><strong>nd</strong>：设备节点<br><strong>propname</strong>：属性名称<br><strong>outvalue</strong>: 值存储到此地址<br>返回值：0-成功 负值-失败</br></li></ul></li><li><p>读取属性中的字符串<br><code>int of_property_read_string(struct device_node *np, const char *propname, char **out_string);</code><br><strong>nd</strong>：设备节点<br><strong>propname</strong>：属性名称<br><strong>outvalue</strong>: 字符串储存地址<br>返回值：0-成功 负值-失败</p></br></li><li><p>读取#address-cells值<br><code>int of_n_addr_cells(struct device_node *np)</code><br><strong>np</strong>：设备节点<br><strong>返回值</strong>：addr-cell的值</p><br/></li><li><p>读取#size-cells值<br><code>int of_n_size_cells(struct device_node *np)</code><br><strong>np</strong>：设备节点<br><strong>返回值</strong>：size-cell的值</p></li></ol><h4 id="其他常用of函数"><a href="#其他常用of函数" class="headerlink" title="其他常用of函数"></a>其他常用of函数</h4><ol><li><p>检查设备节点兼容性<br><code>int of_device_is_compatible(struct device_node *np, const char *compat)</code><br><strong>np</strong>：设备节点<br><strong>compat</strong>：要检查的兼容性字符串<br><strong>返回值</strong>：0-compatible属性中不包含此字符串<br>       1-compatible属性中包含此字符串</p><br/></li><li><p>获取地址相关属性<br><code>const __be32 *of_get_address(struct device_node *np,int index, u64 *size, unsigned int *flags)</code><br><strong>np</strong>：设备节点<br><strong>index</strong>: 要读取的地址标号<br><strong>size</strong>：地址长度<br><strong>flags</strong>：参数 IORESOURCE_IOIORESOURCE_MEM 等<br><strong>返回值</strong>：读到的地址数据首地址，为NULL表示读取失败</p></li></ol><!--PC版--><div id="SOHUCS" ></div><script charset="utf-8" type="text/javascript" src="https://cy-cdn.kuaizhan.com/upload/changyan.js" ></script><script type="text/javascript">window.changyan.api.config({appid: 'cywhVLBNm',conf: 'prod_449188a899f144a2be2e05b0a1b8f390'});</script>     ]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Drivers</category>
      
      <category>设备树</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux_driver</tag>
      
      <tag>设备树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>字符设备框架</title>
    <link href="/2022/09/22/%E5%AD%97%E7%AC%A6%E8%AE%BE%E5%A4%87%E6%A1%86%E6%9E%B6/"/>
    <url>/2022/09/22/%E5%AD%97%E7%AC%A6%E8%AE%BE%E5%A4%87%E6%A1%86%E6%9E%B6/</url>
    
    <content type="html"><![CDATA[<h3 id="通用头文件"><a href="#通用头文件" class="headerlink" title="通用头文件"></a>通用头文件</h3><p>以下三个头文件几乎所有的linux驱动代码都需要</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/kernel.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/init.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/module.h&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="设备结构体并创建设备对象"><a href="#设备结构体并创建设备对象" class="headerlink" title="设备结构体并创建设备对象"></a>设备结构体并创建设备对象</h3><h4 id="定义设备结构体"><a href="#定义设备结构体" class="headerlink" title="定义设备结构体"></a>定义设备结构体</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> xxx_CNT 1      <span class="hljs-comment">//设备数量</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> xxx_NAME  <span class="hljs-string">&quot;xxx&quot;</span>  <span class="hljs-comment">//驱动名称</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">xxx_dev</span>&#123;</span><br>    <span class="hljs-type">dev_t</span> devid;        <span class="hljs-comment">//设备号</span><br>    <span class="hljs-type">int</span> major;          <span class="hljs-comment">//主设备号</span><br>    <span class="hljs-type">int</span> minor;          <span class="hljs-comment">//从设备号</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cdev</span> <span class="hljs-title">cdev</span>;</span>   <span class="hljs-comment">//cdev结构体</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-keyword">class</span> *<span class="hljs-keyword">class</span>;</span> <span class="hljs-comment">//类结构体</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">device</span> *<span class="hljs-title">dev</span>;</span>  <span class="hljs-comment">//设备结构体</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>cdev</strong> 需要包含头文件<mark>#include &lt;linux&#x2F;cdev.h&gt;</mark><br><strong>class和device</strong>需要包含头文件<mark>#include &lt;linux&#x2F;devices.h&gt;</mark></p><h4 id="创建设备对象"><a href="#创建设备对象" class="headerlink" title="创建设备对象"></a>创建设备对象</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">xxx_dev</span> <span class="hljs-title">xxx</span>;</span><br></code></pre></td></tr></table></figure><h3 id="file-operation集各项函数具体实现"><a href="#file-operation集各项函数具体实现" class="headerlink" title="file_operation集各项函数具体实现"></a>file_operation集各项函数具体实现</h3><h4 id="open函数具体实现"><a href="#open函数具体实现" class="headerlink" title="open函数具体实现"></a>open函数具体实现</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">xxx_open</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> inode *inode, <span class="hljs-keyword">struct</span> file *filp)</span><br>&#123;<br>    filp-&gt;private_data = &amp;xxx; 将设备结构体对象设为私有数据<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="read函数具体实现"><a href="#read函数具体实现" class="headerlink" title="read函数具体实现"></a>read函数具体实现</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">ssize_t</span> <span class="hljs-title function_">xxx_read</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> file *filp, <span class="hljs-type">char</span> __user *buf, <span class="hljs-type">size_t</span> cnt, <span class="hljs-type">loff_t</span> *offt)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">xxx_dev</span> *<span class="hljs-title">dev</span> =</span> (xxx_dev *)filp-&gt;private_data;   <span class="hljs-comment">//获取私有数据</span><br>    copy_to_user(目标buf, 源, cnt);<br>    ...<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>copy_to_uaer</strong>函数需要包含头文件<code>#include &lt;asm/uaccess.h&gt;</code></p><h4 id="write函数具体实现"><a href="#write函数具体实现" class="headerlink" title="write函数具体实现"></a>write函数具体实现</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">ssize_t</span> <span class="hljs-title function_">xxx_write</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> file *filp, <span class="hljs-type">const</span> <span class="hljs-type">char</span> __user *buf, <span class="hljs-type">size_t</span> cnt, <span class="hljs-type">loff_t</span> *offt)</span><br>&#123;<br>    copy_from_user(目标buf, 源, cnt);<br>    ...<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="release函数具体实现"><a href="#release函数具体实现" class="headerlink" title="release函数具体实现"></a>release函数具体实现</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">XXX_release</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> inode *inode, <span class="hljs-keyword">struct</span> file *filp)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="设备操作函数集合-需包含头文件-include-lt-linux-fs-h-gt"><a href="#设备操作函数集合-需包含头文件-include-lt-linux-fs-h-gt" class="headerlink" title="设备操作函数集合 需包含头文件#include &lt;linux/fs.h&gt;"></a>设备操作函数集合 需包含头文件<code>#include &lt;linux/fs.h&gt;</code></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file_operations</span> <span class="hljs-title">xxx_fops</span>=</span><br>&#123;<br>    .owner = THIS_MODUle,       <span class="hljs-comment">//模块拥有者</span><br>    .open = xxx_open,           <span class="hljs-comment">//open函数具体实现       </span><br>    .read = xxx_read,           <span class="hljs-comment">//read函数具体实现</span><br>    .write = xxx_write,         <span class="hljs-comment">//write函数具体实现</span><br>    .release = xxx_release,     <span class="hljs-comment">//release函数具体实现</span><br>    ...<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="模块入口函数"><a href="#模块入口函数" class="headerlink" title="模块入口函数"></a>模块入口函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> __init <span class="hljs-title function_">xxx_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    ...<br>    ...<br>    <span class="hljs-comment">/* 分配设备号 */</span><br>    <span class="hljs-keyword">if</span>(xxx.major)       <span class="hljs-comment">//如果已经分配主设备号</span><br>    &#123;<br>        xxx.devid = MKDIR(xxx.major, <span class="hljs-number">0</span>);  <span class="hljs-comment">//创建设备号</span><br>        register_chrdev_region(XXX.devid, xxx_CNT, xxx_NAME);  <span class="hljs-comment">//注册设备号</span><br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        alloc_chrdev_region(&amp;xxx.devid, <span class="hljs-number">0</span>, xxx_CNT, xxx_NAME);  <span class="hljs-comment">//分配设备号 0为从设备号起始值</span><br>        xxx.major = MAJOR(xxx.devid);<br>        xxx.minor = MINOR(xxx.devid);<br>    &#125;<br><br>    <span class="hljs-comment">/*初始化cdev*/</span><br>    xxx.cdev.owner = THIS_MODULE;<br>    cdev_init(&amp;xxx.cdev, &amp;xxx_fops);<br>    <span class="hljs-comment">/*添加cdev*/</span><br>    cdev_add(&amp;xxx.cdev, xxx.devid, xxx_CNT);<br><br>    <span class="hljs-comment">/* 创建类 */</span><br>    xxxx-&gt;<span class="hljs-class"><span class="hljs-keyword">class</span> =</span> class_create(THIS_MODULE, xxx_NAME);<br>    <span class="hljs-comment">/* 类下创建设备 */</span><br>    xxx-&gt;device = device_create(xxx.class, <span class="hljs-literal">NULL</span>, xxx.devid, <span class="hljs-literal">NULL</span>, xxx_NAME);<br><br>    ...<br>    ...<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="出口函数形式"><a href="#出口函数形式" class="headerlink" title="出口函数形式"></a>出口函数形式</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> __exit <span class="hljs-title function_">xxx_exit</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    cdev_del(&amp;xxx.cdev);     <span class="hljs-comment">//删除cdev</span><br>    unregister_chrdev_region(xxx.devid, xxx_CNT);  <span class="hljs-comment">//注销字符设备</span><br>    device_destroy(xxx-&gt;class, xxx-&gt;device);<br>    class_destroy(xxx-&gt;class);<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="模块入口和模块出口"><a href="#模块入口和模块出口" class="headerlink" title="模块入口和模块出口"></a>模块入口和模块出口</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">module_init(xxx_init);    <span class="hljs-comment">//模块入口</span><br>module_exit(xxx_exit);    <span class="hljs-comment">//模块出口</span><br>MODULE_LICENSE(<span class="hljs-string">&quot;GPL&quot;</span>);    <span class="hljs-comment">//模块协议</span><br>MODULE_AUTHOR(<span class="hljs-string">&quot;Hector&quot;</span>);  <span class="hljs-comment">//模块作者</span><br></code></pre></td></tr></table></figure><!--PC版--><div id="SOHUCS" ></div><script charset="utf-8" type="text/javascript" src="https://cy-cdn.kuaizhan.com/upload/changyan.js" ></script><script type="text/javascript">window.changyan.api.config({appid: 'cywhVLBNm',conf: 'prod_449188a899f144a2be2e05b0a1b8f390'});</script>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Drivers</category>
      
      <category>字符设备驱动</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux_driver</tag>
      
      <tag>字符设备</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Makefile详解</title>
    <link href="/2022/09/21/Makefile%E5%B8%B8%E7%94%A8%E5%A5%97%E8%B7%AF/"/>
    <url>/2022/09/21/Makefile%E5%B8%B8%E7%94%A8%E5%A5%97%E8%B7%AF/</url>
    
    <content type="html"><![CDATA[<h3 id="Makefile-简介"><a href="#Makefile-简介" class="headerlink" title="Makefile 简介"></a>Makefile 简介</h3><ul><li>Makefile作用：<strong>记录依赖关系和编译规则；</strong></li><li>Makefile三要素：<strong>目标、依赖、命令</strong></li><li>Makefile基本格式：<br>  目标：依赖的文件或者其他目标<br>  &lt;tab&gt;命令1<br>  &lt;tab&gt;命令2<br>  …</li><li>设置伪目标：.PHONY: clean</li><li>指定Makefile文件：make -f Makefile2</li></ul><h3 id="Makefile变量及模式规则"><a href="#Makefile变量及模式规则" class="headerlink" title="Makefile变量及模式规则"></a>Makefile变量及模式规则</h3><ul><li>自定义变量</li></ul><table><thead><tr><th align="center">符号</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">&#x3D;</td><td align="center">延时赋值（调用时赋值）</td></tr><tr><td align="center">:&#x3D;</td><td align="center">立即赋值</td></tr><tr><td align="center">?&#x3D;</td><td align="center">空赋值（变量为空时赋值）</td></tr><tr><td align="center">+&#x3D;</td><td align="center">追加赋值（不覆盖原值，在后面追加）</td></tr></tbody></table><ul><li><p>自动化变量</p><ol><li>$&lt; 第一个依赖文件</li><li>$^ 所有的依赖文件</li><li>$@ 目标文件</li></ol></li><li><p>模式匹配：%匹配任意多个非空字符</p></li><li><p>默认规则：.o文件默认.c文件编译</p></li></ul><h3 id="Makefile条件分支"><a href="#Makefile条件分支" class="headerlink" title="Makefile条件分支"></a>Makefile条件分支</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-keyword">ifeq</span>(var1,var2)       |         <span class="hljs-keyword">ifneq</span>(var1,var2)<br>    ...               |             ...<br><span class="hljs-keyword">else</span>                  |         <span class="hljs-keyword">else</span><br>    ...               |             ...<br><span class="hljs-keyword">endif</span>                 |         <span class="hljs-keyword">endif</span> <br></code></pre></td></tr></table></figure><h3 id="Makefile常用函数"><a href="#Makefile常用函数" class="headerlink" title="Makefile常用函数"></a>Makefile常用函数</h3><ul><li>patsubst(模式替换函数): <code>$&#123;patsubst pattern, replace_pattern, text&#125;</code> %作通配符</li><li>notdir(取文件名函数): <code>$&#123;notdir .../.../name&#125;</code>去掉目录部分只取文件名</li><li>wildcard(取匹配文件名函数)：<code>$&#123;wildcard pattern&#125;</code>取当前目录下所有符合pattern模式的文件名，*作通配符</li><li>foreach(遍历函数)：<code>$&#123;foreach var, list, text&#125;</code>将list中每一个单词赋值给var,然后在text中使用var</li></ul><h3 id="编写Makefile"><a href="#编写Makefile" class="headerlink" title="编写Makefile"></a>编写Makefile</h3><ul><li>创建目录用于存储编译过程中生成的文件：BUILD_DIR</li><li>源文件目录（存放.c及.s后缀文件）：SRC_DIR</li><li>头文件目录（存放.h文件）：INC_DIR</li><li>搜索路径关键字：VPATH</li><li>编译器头文件路径：CFLAGS -I + 头文件路径</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-keyword">ifeq</span> ($&#123;ARCH&#125;,x86)   //判断当前编译环境 win上编译命令：make ARCH=x86<br>CC = gcc<br><span class="hljs-keyword">else</span><br>CC = arm-linux-gnuenbihf-gcc<br><span class="hljs-keyword">endif</span><br><br>TARGET = output     //输出可执行文件名<br>BUILD_DIR = build   //生成文件储存目录<br>SRC_DIR = .         //源文件存储于当前面目录<br>INC_DIR = .         //头文件存储与当前目录<br><br>SOURCES_C = $&#123;foreach dir,$&#123;SRC_DIR&#125;,$&#123;wildcard $&#123;dir&#125;/*.c&#125;&#125;   //所有.c文件路径<br>SOURCES_S = $&#123;foreach dir,$&#123;SRC_DIR&#125;,$&#123;wildcard $&#123;dir&#125;/*.s&#125;&#125;   //所有.s文件路径<br>INCLUDES = $&#123;foreach dir,$&#123;INC_DIR&#125;,$&#123;wildcard $&#123;dir&#125;/*.h&#125;&#125;    //所有头文件路径<br>OBJS = $&#123;patsubst %.c,$&#123;BUILD_DIR&#125;/%.o,$&#123;notdir $&#123;SOURCES_C&#125;&#125;&#125; //.c文件生成的.o文件名<br>OBJS += $&#123;patsubst %.s,$&#123;BUILD_DIR&#125;/%.o,$&#123;notdir $&#123;SOURCES_C&#125;&#125;&#125; //.s文件生成的.o文件名<br>VPATH = $&#123;SRC_DIR&#125;   //编译器搜索路径为源文件路径<br>CFLAGS = $&#123;patsubst %,-I%,$&#123;INC_DIR&#125;&#125;  //编译器头文件路径<br><br><span class="hljs-section">$&#123;BUILD_DIR&#125;/$&#123;TARGET&#125;:$&#123;OBJS&#125;</span><br>$&#123;CC&#125; <span class="hljs-variable">$^</span> -o <span class="hljs-variable">$@</span> $&#123;CFLAGS&#125;<br><br><span class="hljs-section">$&#123;BUILD_DIR&#125;/%.o:%.c $&#123;INCLUDES&#125; | create_build</span><br>$&#123;CC&#125; -c <span class="hljs-variable">$&lt;</span> -o <span class="hljs-variable">$@</span> $&#123;CFLAGS&#125;<br><br><span class="hljs-meta"><span class="hljs-keyword">.PHONY</span>:clean create_build  //伪目标</span><br><br><span class="hljs-section">clean:                     //make clean时执行清除rm命令</span><br>rm -r $&#123;BUILD_DIR&#125;<br><br><br><span class="hljs-section">create_build:             //创建build目录</span><br>mkdir -p $&#123;BUILD_DIR&#125;<br></code></pre></td></tr></table></figure><!--PC版--><div id="SOHUCS" ></div><script charset="utf-8" type="text/javascript" src="https://cy-cdn.kuaizhan.com/upload/changyan.js" ></script><script type="text/javascript">window.changyan.api.config({appid: 'cywhVLBNm',conf: 'prod_449188a899f144a2be2e05b0a1b8f390'});</script>    ]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Makefile</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Makefile</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MarkDown基本语法</title>
    <link href="/2022/09/21/markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <url>/2022/09/21/markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>1.块级元素：占据一行或者多<br>2.行内元素：只占据自身所需要的空间</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs clean">## 六级标题(标题前加#， 后留空格)：<br># 标题一 （# 标题一）<br>## 标题二 （## 标题二）<br>### 标题三 （### 标题三）<br># ...<br></code></pre></td></tr></table></figure><h1 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h1><h2 id="引用（前加-gt-）："><a href="#引用（前加-gt-）：" class="headerlink" title="引用（前加 &gt; ）："></a>引用（前加 &gt; ）：</h2><blockquote><p>这是一段引用(&gt; 这是一段引用)</p></blockquote><h2 id="无序列表（前加-或者-）："><a href="#无序列表（前加-或者-）：" class="headerlink" title="无序列表（前加 - 或者 *）："></a>无序列表（前加 - 或者 *）：</h2><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">- </span>第一步 (- 第一步)<br><span class="hljs-bullet">* </span>第二步 (* 第二步)<br><span class="hljs-bullet">- </span>第三步<br><span class="hljs-bullet">- </span>...<br></code></pre></td></tr></table></figure><ul><li>第一步 (- 第一步)</li></ul><ul><li>第二步 (* 第二步)</li></ul><ul><li>第三步</li><li>…</li></ul><h2 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a>任务列表</h2><p>（前加 -  [ ] 注意加空格 中括号中加x表示任务完成]）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">- <span class="hljs-selector-attr">[ ]</span> 吃饭 (- <span class="hljs-selector-attr">[ ]</span> 吃饭)<br>- <span class="hljs-selector-attr">[x]</span> 睡觉 (- <span class="hljs-selector-attr">[x]</span> 睡觉)<br></code></pre></td></tr></table></figure><ul><li><input disabled="" type="checkbox"> 吃饭 (- [ ] 吃饭)</li><li><input checked="" disabled="" type="checkbox"> 睡觉 (- [x] 睡觉)</li></ul><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p>三个反引号 + 语言类型  结束用三个反引号</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">mian</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hello world \r\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">|<span class="hljs-string">姓名</span>|<span class="hljs-string">年龄</span>|<span class="hljs-string">成绩</span>|<br>|<span class="hljs-string">:---:</span>|<span class="hljs-string">:---:</span>|<span class="hljs-string">:---:</span>|<br>|<span class="hljs-string">张三</span>|<span class="hljs-string">24</span>|<span class="hljs-string">89</span>|<br>|<span class="hljs-string">李四</span>|<span class="hljs-string">23</span>|<span class="hljs-string">98</span>|<br></code></pre></td></tr></table></figure><table><thead><tr><th align="center">姓名</th><th align="center">年龄</th><th align="center">成绩</th></tr></thead><tbody><tr><td align="center">张三</td><td align="center">24</td><td align="center">89</td></tr><tr><td align="center">李四</td><td align="center">23</td><td align="center">98</td></tr></tbody></table><h2 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">一键三连<span class="hljs-selector-attr">[^三连]</span><br></code></pre></td></tr></table></figure><p>一键三连[^三连]</p><h2 id="横线"><a href="#横线" class="headerlink" title="横线"></a>横线</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><hr><h1 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h1><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-attr">[百度]</span>(www<span class="hljs-selector-class">.baidu</span><span class="hljs-selector-class">.com</span> <span class="hljs-string">&quot;一个搜索引擎&quot;</span>)<br></code></pre></td></tr></table></figure><p><a href="http://www.baidu.com/" title="一个搜索引擎">百度</a></p><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">![图片]( /images/自由动态.png )<br>&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;/images/自由动态.png&quot;</span> <span class="hljs-attribute">width</span>=<span class="hljs-string">&quot;20%&quot;</span> <span class="hljs-attribute">height</span>=<span class="hljs-string">&quot;20%&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p><img src="/images/%E8%87%AA%E7%94%B1%E5%8A%A8%E6%80%81.png" alt="图片"></p><div align=center><img src="/images/自由动态.png" width="20%" height="20%"></div><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-strong">*斜体*</span>  <span class="hljs-strong">**加粗**</span> <span class="hljs-code">`printf(&quot;hello world&quot;);`</span> &lt;u&gt;下划线&lt;/u&gt;<br><span class="hljs-meta">:simile:</span><br>H&lt;sub&gt;2&lt;/sub&gt;O  X&lt;sup&gt;2&lt;sup&gt;  &lt;mark&gt;这是一段高亮文字&lt;/mark&gt;<br></code></pre></td></tr></table></figure><p><em>斜体</em>  <strong>加粗</strong> <code>printf(&quot;hello world&quot;);</code> <u>下划线</u></p><p>:smile:</p><p>H<sub>2</sub>O  X<sup>2</sup></p><p><mark>这是一段高亮文字</mark></p><!--PC版--><div id="SOHUCS" ></div><script charset="utf-8" type="text/javascript" src="https://cy-cdn.kuaizhan.com/upload/changyan.js" ></script><script type="text/javascript">window.changyan.api.config({appid: 'cywhVLBNm',conf: 'prod_449188a899f144a2be2e05b0a1b8f390'});</script>]]></content>
    
    
    <categories>
      
      <category>others</category>
      
      <category>MarkDown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MarkDown</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
